export default ((e,s,u,g)=>({
         fn : {}, 
/************** Maps **************/
    st:s,
    /* Types */ ty: {1:1,2:1,3:2,4:2,8:3,16:3,32:4,64:4,128:5,256:5,264:6,512:6,1025:7,2049:7,4097:8,8193:8,16385:9,32769:9,number:10,num:10,identifier:11,string:11,white_space:12,open_bracket:12,close_bracket:13,operator:13,symbol:14,new_line:14,data_link:15,number_bin:15,number_oct:16,number_hex:16,number_int:17,number_sci:17,number_flt:18,alpha_numeric:18,white_space_new_line:30,id:19,str:20,ws:20,ob:21,cb:21,op:22,sym:22,nl:23,dl:23,int:24,integer:24,bin:25,binary:25,oct:26,octal:26,hex:27,hexadecimal:27,flt:28,float:28,sci:29,scientific:29,any:31,keyword:32},
    /* Symbols To Inject into the Lexer */ sym : [],
    /* Symbol Lookup map */ lu : new Map([["num",1],["id",1],["alpha_numeric",2],["str",2],["ws",3],["ob",3],["cb",4],["op",4],["sym",5],["nl",5],["white_space_new_line",6],["dl",6],["binary",7],["octal",7],["hexadecimal",8],["integer",8],["scientific",9],["float",9],[1,10],[2,19],[4,20],[8,20],[16,21],[32,21],[64,22],[128,22],[256,23],[512,23],[1025,25],[2049,26],[4097,27],[8193,24],[16385,29],[32769,28],[3,18],[264,30],[200,31],[201,32],[",",34],["(",35],[")",36],["[",37],["as",38],["]",39],["at",40],[null,10],[".",49],["<",43],["anonymous",44],[">",45],[":",46],["/",48],["_",50]]),
    /* Reverse Symbol Lookup map */ rlu : new Map([[1,"num"],[1,"id"],[2,"alpha_numeric"],[2,"str"],[3,"ws"],[3,"ob"],[4,"cb"],[4,"op"],[5,"sym"],[5,"nl"],[6,"white_space_new_line"],[6,"dl"],[7,"binary"],[7,"octal"],[8,"hexadecimal"],[8,"integer"],[9,"scientific"],[9,"float"],[10,1],[19,2],[20,4],[20,8],[21,16],[21,32],[22,64],[22,128],[23,256],[23,512],[25,1025],[26,2049],[27,4097],[24,8193],[29,16385],[28,32769],[18,3],[30,264],[31,200],[32,201],[34,","],[35,"("],[36,")"],[37,"["],[38,"as"],[39,"]"],[40,"at"],[10,null],[49,"."],[43,"<"],[44,"anonymous"],[45,">"],[46,":"],[48,"/"],[50,"_"]]),
    /* States */ sts : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,14,15,16,15,9,17,18,19,20,21,22,23,24,18,25,26,27,27,27,28,29,30,31,32,33,34,35,36,37,38,39].map(i=>s[i]),
    /* Fork Map */fm: [],
    /*Goto Lookup Functions*/ gt:g[0].map(i=>i>=0?u[i]:[]),
/************ Functions *************/
    /* Error Functions */ eh : [e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],
    /* Environment Functions*/ fns: [function  (A){const b = A.length - 1,a = b - 2; if (A[b] !== null) A[a].push(A[b]);  A[b] = A[a];} ,function  (A){const b = A.length - 1; A[b] = ((A[b] !== null) ? [A[b]] : []);} ,A => ({ locations:A[2].flat() }),A => (A[1].locations),A => ({ type:"URL",url:A[0].url,protocol:A[0].protocol,line:parseInt(A[2]),col:parseInt(A[4]) }),A => ({ type:"ANON",line:parseInt(A[4]),col:parseInt(A[6]) }),A => ({ url:A[0],protocol:"" }),A => (A[0].url += A[1],A[0]),A => ({ protocol:A[0].url,url:"" })],
    /* State Action Functions */ sa : [e=>26,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),9),(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),2059),e=>42,e=>34,e=>58,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),12299),e=>154,(a,b,c,e,f,g,p)=>(p.rn(2,a,b,c,e,f),10259),e=>90,e=>74,e=>82,(a,b,c,e,f,g,p)=>(p.rn(3,a,b,c,e,f),10267),(a,b,c,e,f,g,p)=>(p.rn(2,a,b,c,e,f),12307),(a,b,c,e,f,g,p)=>(p.rn(3,a,b,c,e,f),12315),e=>98,e=>106,e=>114,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),18443),e=>130,e=>138,e=>146,(a,b,c,e,f,g,p)=>(p.rn(2,a,b,c,e,f),18451),(a,b,c,e,f,g,p)=>(p.rn(4,a,b,c,e,f),8227),e=>170,e=>218,e=>202,e=>226,e=>194,(a,b,c,e,f,g,p)=>(p.s(g[1],a,b,c,e,f),p.rn(1,a,b,c,e,f),4107),(a,b,c,e,f,g,p)=>(p.rv(g[2],4,0,a,b,c,e,f),6179),e=>234,e=>250,e=>242,e=>258,e=>266,(a,b,c,e,f,g,p)=>(p.rv(g[6],1,0,a,b,c,e,f),16395),e=>282,e=>290,e=>298,(a,b,c,e,f,g,p)=>(p.rv(g[7],2,0,a,b,c,e,f),16403),(a,b,c,e,f,g,p)=>(p.rv(g[3],2,0,a,b,c,e,f),14355),e=>330,e=>314,e=>322,(a,b,c,e,f,g,p)=>(p.s(g[0],a,b,c,e,f),p.rn(3,a,b,c,e,f),4123),e=>338,(a,b,c,e,f,g,p)=>(p.rv(g[8],4,0,a,b,c,e,f),16419),e=>346,(a,b,c,e,f,g,p)=>(p.rv(g[4],5,0,a,b,c,e,f),14379),e=>354,e=>362,(a,b,c,e,f,g,p)=>(p.rv(g[5],7,0,a,b,c,e,f),14395)],
    /* Get Token Function  */ gtk:function getToken(l, SYM_LU, IGNORE_KEYWORDS = false) {    if (l.END)        return 0;    if ((l.ty & 1)) {        if (!IGNORE_KEYWORDS && SYM_LU.has(l.tx))            return SYM_LU.get(l.tx);        switch (l.ty) {            case 16385:                return 29;            case 4097:                return 27;            case 2049:                return 26;            case 1025:                return 25;            case 32769:                return 28;            case 8193:                return 24;            default:            case 1:                return 10;        }    }    switch (l.ty) {        case 2:            if (!IGNORE_KEYWORDS && SYM_LU.has(l.tx))                return 32;            return 19;        case 4:            return 20;        case 256:            return 23;        case 8:            return 20;        case 512:            return 23;        default:            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);    }},
}))((tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token [${l.tx}]`)},...([
    [[-20,0,-2,0,-16,1],[2,-19,0,-2,0],[3,-19,0,-2,0],[-19,4,0,-2,0,-19,5],[-20,0,-2,0,-20,6],[-19,7,0,-2,0,-11,7,-1,7,-11,7],[-19,8,0,-2,0,-11,9,-1,10,-11,11],[-20,0,-2,0,-21,12],[-20,0,-2,0,-11,13],[-19,14,0,-2,0,-11,14,-1,14,-11,14],[-19,15,0,-2,0,-11,15,-1,15,-11,15],[-20,0,-2,0,-14,16],[-19,17,0,-2,0,-26,18],[-19,19,0,-2,0,-15,19,-10,19],[-19,20,0,-2,0,-15,21,-10,22],[-19,23,0,-2,0,-15,23,-10,23],[-20,0,-2,0,-11,24],[-20,0,-2,0,-11,25],[-19,26,0,-2,0,-19,27],[-20,0,-2,0,-10,28,-1,29],[-20,0,-2,0,-10,30,-1,30],[31,-19,0,-2,0,-10,31,-1,31],[-20,0,-2,0,-20,32],[-19,33,0,-2,0,-22,34,-1,35,36],[-19,37,0,-2,0,-16,1,-5,37,-1,37,37],[-20,0,-2,0,-21,38],[-10,39,-9,0,-2,0,-24,40],[-19,41,0,-2,0,-22,41,-1,41,41],[-20,0,-2,0,-10,42,-1,42],[-20,0,-2,0,-22,43],[-20,0,-2,0,-22,44],[-20,0,-2,0,-24,45],[-20,0,-2,0,-10,46,-1,46],[-10,47,-9,0,-2,0],[-19,48,0,-2,0,-22,48,-1,48,48],[-10,49,-9,0,-2,0],[-20,0,-2,0,-10,50,-1,50],[-20,0,-2,0,-22,51],[-10,52,-9,0,-2,0],[-20,0,-2,0,-10,53,-1,53]],
    [[-1,1,-1,2,-1,20],[-6,6],[-4,8],[-9,15],[-2,22,-4,23,26],[-3,34,-1,20],[-7,38,26]],
    [[0,-2,1,-2,2,-5,3,-8,4,-5,5,6,-17]]
    ]).map(e=>e.map(s=>s.flatMap(d=> d < 0 ? (new Array(-d)).fill(-1) : d)))
);