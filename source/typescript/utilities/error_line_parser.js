export default ((e,s,u,g)=>({
         fn : {}, 
/************** Maps **************/
    st:s,
    /* Types */ ty: {1:1,2:1,3:2,4:2,8:3,16:3,32:4,64:4,128:5,256:5,264:6,512:6,1025:7,2049:7,4097:8,8193:8,16385:9,32769:9,number:10,num:10,identifier:11,string:11,white_space:12,open_bracket:12,close_bracket:13,operator:13,symbol:14,new_line:14,data_link:15,number_bin:15,number_oct:16,number_hex:16,number_int:17,number_sci:17,number_flt:18,alpha_numeric:18,white_space_new_line:30,id:19,str:20,ws:20,ob:21,cb:21,op:22,sym:22,nl:23,dl:23,int:24,integer:24,bin:25,binary:25,oct:26,octal:26,hex:27,hexadecimal:27,flt:28,float:28,sci:29,scientific:29,any:31,keyword:32},
    /* Symbols To Inject into the Lexer */ sym : [],
    /* Symbol Lookup map */ lu : new Map([["num",1],["id",1],["alpha_numeric",2],["str",2],["ws",3],["ob",3],["cb",4],["op",4],["sym",5],["nl",5],["white_space_new_line",6],["dl",6],["binary",7],["octal",7],["hexadecimal",8],["integer",8],["scientific",9],["float",9],[1,10],[2,19],[4,20],[8,20],[16,21],[32,21],[64,22],[128,22],[256,23],[512,23],[1025,25],[2049,26],[4097,27],[8193,24],[16385,29],[32769,28],[3,18],[264,30],[200,31],[201,32],[",",34],["(",35],[")",36],["[",37],["as",38],["]",39],["at",40],[null,10],[".",49],["<",43],["anonymous",44],[">",45],[":",46],["/",48],["_",50]]),
    /* States */ sts : [0,1,2,3,4,5,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,20,21,22,22,22,23,24,5,24,25,26,27,28,29,30,31,31,32,33,34,35,36,37,38,39].map(i=>s[i]),
    /* Fork Map */fm: [],
    /*Goto Lookup Functions*/ gt:g[0].map(i=>i>=0?u[i]:[]),
/************ Functions *************/
    /* Error Functions */ eh : [e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],
    /* Environment Functions*/ fns: [A=>(A[0].flat()),function (A){const b=A.length-1,a=b-2;if(A[b]!==null)A[a].push(A[b]);A[b]=A[a];},function (A){const b=A.length-1;A[b]=((A[b]!==null)?[A[b]]:[]);},A=>(A[2]),A=>(A[1]),A=>({type:"URL",url:A[0].url,protocol:A[0].protocol,line:parseInt(A[2]),col:parseInt(A[4])}),A=>({type:"ANONYMOUS",line:parseInt(A[4]),col:parseInt(A[6])}),A=>({url:A[0],protocol:""}),A=>(A[0].url+=A[1],A[0]),A=>({protocol:A[0].url,url:""})],
    /* State Action Functions */ sa : [e=>34,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),9),e=>42,(a,b,c,e,f,g,p)=>(p.rv(g[0],1,0,a,b,c,e,f),2059),e=>58,e=>66,e=>154,e=>122,e=>106,(a,b,c,e,f,g,p)=>(p.rn(2,a,b,c,e,f),10259),e=>90,e=>98,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),12299),e=>162,e=>226,e=>130,(a,b,c,e,f,g,p)=>(p.rn(3,a,b,c,e,f),10267),e=>146,(a,b,c,e,f,g,p)=>(p.rn(2,a,b,c,e,f),12307),(a,b,c,e,f,g,p)=>(p.s(g[2],a,b,c,e,f),p.rn(1,a,b,c,e,f),4107),e=>170,(a,b,c,e,f,g,p)=>(p.rv(g[3],4,0,a,b,c,e,f),6179),e=>186,e=>178,e=>194,e=>202,e=>218,e=>234,(a,b,c,e,f,g,p)=>(p.rv(g[7],1,0,a,b,c,e,f),16395),e=>250,e=>258,e=>266,e=>274,(a,b,c,e,f,g,p)=>(p.rv(g[8],2,0,a,b,c,e,f),16403),e=>290,e=>282,e=>298,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),18443),(a,b,c,e,f,g,p)=>(p.rv(g[4],2,0,a,b,c,e,f),14355),(a,b,c,e,f,g,p)=>(p.rn(3,a,b,c,e,f),12315),e=>314,e=>322,e=>330,(a,b,c,e,f,g,p)=>(p.rn(4,a,b,c,e,f),8227),(a,b,c,e,f,g,p)=>(p.rn(2,a,b,c,e,f),18451),(a,b,c,e,f,g,p)=>(p.s(g[1],a,b,c,e,f),p.rn(3,a,b,c,e,f),4123),e=>338,e=>346,(a,b,c,e,f,g,p)=>(p.rv(g[9],4,0,a,b,c,e,f),16419),e=>354,(a,b,c,e,f,g,p)=>(p.rv(g[5],5,0,a,b,c,e,f),14379),e=>362,(a,b,c,e,f,g,p)=>(p.rv(g[6],7,0,a,b,c,e,f),14395)],
    /* Get Token Function  */ gtk:function getToken(l, SYM_LU, IGNORE_KEYWORDS = false) {    if (l.END)        return 0;    if ((l.ty & 1)) {        if (!IGNORE_KEYWORDS && SYM_LU.has(l.tx))            return SYM_LU.get(l.tx);        switch (l.ty) {            case 16385:                return 29;            case 4097:                return 27;            case 2049:                return 26;            case 1025:                return 25;            case 32769:                return 28;            case 8193:                return 24;            default:            case 1:                return 10;        }    }    switch (l.ty) {        case 2:            if (!IGNORE_KEYWORDS && SYM_LU.has(l.tx))                return 32;            return 19;        case 4:            return 20;        case 256:            return 23;        case 8:            return 20;        case 512:            return 23;        default:            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);    }},
}))((tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token [${l.tx}]`)},...("-l;0;-3;0;-h;2&4;-k;0;-3;0&-l;0;-3;0;-c;6&8;-k;0;-3;0&-k;a;0;-3;0;-k;c&-k;e;0;-3;0;-k;g&-k;i;0;-3;0;-c;k;-2;m;-c;o&-k;q;0;-3;0;-c;q;-2;q;-c;q&-l;0;-3;0;-l;s&-l;0;-3;0;-b;u;-2;w&-l;0;-3;0;-c;y&-l;0;-3;0;-f;10&-k;12;0;-3;0;-c;12;-2;12;-c;12&-l;0;-3;0;-b;14;-2;14&-l;0;-3;0;-l;16&18;-k;0;-3;0;-b;18;-2;18&-k;1a;0;-3;0;-n;1c;-2;1e;1g&-k;1i;0;-3;0;-r;1k&-k;1m;0;-3;0;-h;2;-6;1m;-2;pbv&-l;0;-3;0;-m;1o&-l;0;-3;0;-m;1q&-b;1s;-a;0;-3;0;-p;1u&-k;1w;0;-3;0;-n;1w;-2;pc5&-k;1y;0;-3;0;-g;20;-b;22&-k;24;0;-3;0;-g;24;-b;24&-l;0;-3;0;-b;26;-2;26&-k;28;0;-3;0;-c;28;-2;28;-c;28&-l;0;-3;0;-n;2a&-l;0;-3;0;-n;2c&-l;0;-3;0;-p;2e&-l;0;-3;0;-c;2g&-k;2i;0;-3;0;-g;2i;-b;2i&-l;0;-3;0;-b;2k;-2;2k&-b;2m;-a;0;-3;0&-b;2o;-a;0;-3;0&-k;2q;0;-3;0;-n;2q;-2;pcz&-l;0;-3;0;-n;2s&-l;0;-3;0;-b;2u;-2;2u&-b;2w;-a;0;-3;0&-l;0;-3;0;-b;2y;-2;2y|-2;2;-2;6;-2;4&-7;c&-3;i;-5;s;y&-5;k&-a;1g&-4;1o;-2;4&-8;24;y|0;-4;2;4;6;-c;8;a;-9;c;-i").split("|").map(e=>e.split("&")).map(a => a.map(s => s.split(";").map(s=>parseInt(s,36))).map(s=>s.flatMap(d=>d<0?(new Array(-d-1)).fill(-1):(new Array(((d >>> 15) & 0x3FF) + 1)).fill((d >>> 1) & 0x3FFF)))));